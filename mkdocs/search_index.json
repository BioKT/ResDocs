{
    "docs": [
        {
            "location": "/",
            "text": "Research Toolbox\n\n\nHere you will find documentation and setup scripts for the \ntools that I most commonly use.\n\n\nIndex\n\n\n\n\nGROMACS setup\n\n\nGROMACS scripts\n\n\nBEAST\n\n\nVMD\n\n\nMaking videos in VMD\n\n\nMac OS X hacks\n\n\nLinux Administration\n\n\nPBS scripts\n\n\nOther Documents",
            "title": "Home"
        },
        {
            "location": "/#research-toolbox",
            "text": "Here you will find documentation and setup scripts for the \ntools that I most commonly use.",
            "title": "Research Toolbox"
        },
        {
            "location": "/#index",
            "text": "GROMACS setup  GROMACS scripts  BEAST  VMD  Making videos in VMD  Mac OS X hacks  Linux Administration  PBS scripts  Other Documents",
            "title": "Index"
        },
        {
            "location": "/about/",
            "text": "About\n\n\nMy name is David De Sancho and currently I am a Ramon y Cajal fellow in the \n\nUniversity of the Basque Country\n and\nthe \nDonostia International Physics Center\n.\nMy work focuses on the study of the conformational dynamics of biomolecules with\ncomputational methods, primarily molecular simulation.\nYou can find more information about the work we do in my \n\nwebsite\n\nor check my updated list of publications in \n\nGoogle Scholar\n.\nMuch of the code I write is hosted in \nGithub\n.\nIn this website you will find information about a number of common tools that we use\nin our research.",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "My name is David De Sancho and currently I am a Ramon y Cajal fellow in the  University of the Basque Country  and\nthe  Donostia International Physics Center .\nMy work focuses on the study of the conformational dynamics of biomolecules with\ncomputational methods, primarily molecular simulation.\nYou can find more information about the work we do in my  website \nor check my updated list of publications in  Google Scholar .\nMuch of the code I write is hosted in  Github .\nIn this website you will find information about a number of common tools that we use\nin our research.",
            "title": "About"
        },
        {
            "location": "/Linux/admin/",
            "text": "Linux Administration\n\n\nCreating and mounting new partitions\n\n\nIn order to create a /scratch partition for my Linux server I had to first create \na partition for a hard drive and then mount it in a new location. The first step\nneeded for this was made easy by the fdisk program. Initially when running it \nI would get something like this\n\n\nusername@machinename:$ sudo fdisk -l\n[sudo] password:\nNote: sector size is 4096 (not 512)\n\nDisk /dev/sdb: 999.0 GB, 998997229568 bytes\n255 heads, 63 sectors/track, 15181 cylinders, total 243895808 sectors\nUnits = sectors of 1 * 4096 = 4096 bytes\nSector size (logical/physical): 4096 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisk identifier: 0x00000000\n\nDisk /dev/sdb doesn't contain a valid partition table\n\nDisk /dev/sda: 128.0 GB, 128035676160 bytes\n255 heads, 63 sectors/track, 15566 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x000979b9\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048    19531775     9764864   83  Linux\n/dev/sda2        19533822   250068991   115267585    5  Extended\n/dev/sda5        19533824    28801023     4633600   82  Linux swap / Solaris\n/dev/sda6        28803072   250068991   110632960   83  Linux\n\n\n\n\nYou can see that there are two drives, sda and sdb, the latter of which\ndoes not have a partition table. To create a new partition I simply typed \n\nsudo fdisk /dev/sdb\n and then I entered the dialogue from the fdisk program.\nFirst I created a new partition accepting most of the defaults, which resulted \nin the following output for \nfdisk -l\n\n\nNote: sector size is 4096 (not 512)\n\nDisk /dev/sdb: 999.0 GB, 998997229568 bytes\n208 heads, 2 sectors/track, 586288 cylinders, total 243895808 sectors\nUnits = sectors of 1 * 4096 = 4096 bytes\nSector size (logical/physical): 4096 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisk identifier: 0xc7a7c4cd\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1             256   243895807   975582208   83  Linux\n\nDisk /dev/sda: 128.0 GB, 128035676160 bytes\n255 heads, 63 sectors/track, 15566 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x000979b9\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048    19531775     9764864   83  Linux\n/dev/sda2        19533822   250068991   115267585    5  Extended\n/dev/sda5        19533824    28801023     4633600   82  Linux swap / Solaris\n/dev/sda6        28803072   250068991   110632960   83  Linux\n\n\n\n\nNote the change in that now /dev/sdb1 appears. The next step was formating the\npartition, which can be achieved by typing in the command line\n\n\nsudo mkfs.ext4 /dev/sdb1\n\n\n\n\nThen I created a mount point, which in this case is called /scratch and mounting\nthe new partition sdb1 in that mount point.\n\n\nsudo mkdir /scratch\nsudo mount /dev/sdb1 /scratch\n\n\n\n\nThe final bit was getting my system to mount that partition automatically, by\nediting the /etc/fstab file. For this I needed the UUID for my partition. This\ncan be obtained from \n\n\nls -l /dev/disk/by-uuid/\n\n\n\n\nThen one must edit the /etc/fstab file with the UUID for sdb1, the mount point and the\ntype of partition in a line looking very much like the one that follows\n\n\nUUID=31321321zxcgdfsdg-sdfgsdfaadsas31245 /scratch        ext4    errors=remount-ro 0     2`\n\n\n\n\nA final detail was to recursively give read+write permissions to everyone.\n\n\nsudo chmod -R 777 /scratch/",
            "title": "Admin"
        },
        {
            "location": "/Linux/admin/#linux-administration",
            "text": "",
            "title": "Linux Administration"
        },
        {
            "location": "/Linux/admin/#creating-and-mounting-new-partitions",
            "text": "In order to create a /scratch partition for my Linux server I had to first create \na partition for a hard drive and then mount it in a new location. The first step\nneeded for this was made easy by the fdisk program. Initially when running it \nI would get something like this  username@machinename:$ sudo fdisk -l\n[sudo] password:\nNote: sector size is 4096 (not 512)\n\nDisk /dev/sdb: 999.0 GB, 998997229568 bytes\n255 heads, 63 sectors/track, 15181 cylinders, total 243895808 sectors\nUnits = sectors of 1 * 4096 = 4096 bytes\nSector size (logical/physical): 4096 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisk identifier: 0x00000000\n\nDisk /dev/sdb doesn't contain a valid partition table\n\nDisk /dev/sda: 128.0 GB, 128035676160 bytes\n255 heads, 63 sectors/track, 15566 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x000979b9\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048    19531775     9764864   83  Linux\n/dev/sda2        19533822   250068991   115267585    5  Extended\n/dev/sda5        19533824    28801023     4633600   82  Linux swap / Solaris\n/dev/sda6        28803072   250068991   110632960   83  Linux  You can see that there are two drives, sda and sdb, the latter of which\ndoes not have a partition table. To create a new partition I simply typed  sudo fdisk /dev/sdb  and then I entered the dialogue from the fdisk program.\nFirst I created a new partition accepting most of the defaults, which resulted \nin the following output for  fdisk -l  Note: sector size is 4096 (not 512)\n\nDisk /dev/sdb: 999.0 GB, 998997229568 bytes\n208 heads, 2 sectors/track, 586288 cylinders, total 243895808 sectors\nUnits = sectors of 1 * 4096 = 4096 bytes\nSector size (logical/physical): 4096 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisk identifier: 0xc7a7c4cd\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1             256   243895807   975582208   83  Linux\n\nDisk /dev/sda: 128.0 GB, 128035676160 bytes\n255 heads, 63 sectors/track, 15566 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x000979b9\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048    19531775     9764864   83  Linux\n/dev/sda2        19533822   250068991   115267585    5  Extended\n/dev/sda5        19533824    28801023     4633600   82  Linux swap / Solaris\n/dev/sda6        28803072   250068991   110632960   83  Linux  Note the change in that now /dev/sdb1 appears. The next step was formating the\npartition, which can be achieved by typing in the command line  sudo mkfs.ext4 /dev/sdb1  Then I created a mount point, which in this case is called /scratch and mounting\nthe new partition sdb1 in that mount point.  sudo mkdir /scratch\nsudo mount /dev/sdb1 /scratch  The final bit was getting my system to mount that partition automatically, by\nediting the /etc/fstab file. For this I needed the UUID for my partition. This\ncan be obtained from   ls -l /dev/disk/by-uuid/  Then one must edit the /etc/fstab file with the UUID for sdb1, the mount point and the\ntype of partition in a line looking very much like the one that follows  UUID=31321321zxcgdfsdg-sdfgsdfaadsas31245 /scratch        ext4    errors=remount-ro 0     2`  A final detail was to recursively give read+write permissions to everyone.  sudo chmod -R 777 /scratch/",
            "title": "Creating and mounting new partitions"
        },
        {
            "location": "/Gromacs/installation/",
            "text": "Gromacs installation in Mac OS X\n\n\nBuilding Gromacs 4.* using MAKE\n\n\nOne of the prerequisites for the installation are the fftw libraries for\ndoing Fourier transforms. Setting these up correctly seems to be limiting, \nas in the \nconfigure\n step Gromacs struggled to find the Macports libraries.\nSo first of all, download \n\nfftw-3.0.1.tar.gz\n \non your computer. Then you can simply install as\n\n\n./configure --enable-float --enable-threads\nmake\nsudo make install\n\n\n\n\nThen you can download the source code and proceed to install Gromacs in the usual \nway\n\n\n./configure --prefix=/usr/local/gromacs/4.0.5 --enable-threads --enable-float\nmake\nsudo make install\n\n\n\n\nOn occasion I have found this install to give Segmentation Faults or not work. \nIn order to make it work it needed a little tweaking, making explicit the compiler\nand including additional flags, all of which may make a difference\n\n\nCFLAGS=\"-m64 -U_FORTIFY_SOURCE\"; ./configure --prefix=/usr/local/gromacs/4.0.5 --enable-threads --enable-floats --enable-apple-64bit\nmake\nsudo make install\n\n\n\n\nI still need to work out how to make this run in parallel on a Mac.\n\n\nBuilding Gromacs 5.* using CMAKE\n\n\n(These instructions were borrowed from \n\nPhillip W Fowler\u00b4s\n blog).\n\n\nPrerequisites for the installation are the gcc compilers available at MacPorts.\nThis requires you to first install Xcode.\n\n\nThen the most important thing is to download the source code from the Gromacs \nwebsite and unpack the software.\n\n\ntar xvf gromacs-5.0.4.tar.gz\ncd gromacs-5.0.4\nmkdir build\n\n\n\n\nThen we start with the interestign stuff. In the last few versions Gromacs\nhas made a transition towards using cmake instead of make. Cmake is readily \navailable for Mac OS X, so no problem with this. Then you must run the following\nin the command line:\n\n\ncmake .. -DGMX_BUILD_OWN_FFTW=ON -DCMAKE_INSTALL_PREFIX='/usr/local/gromacs/5.0.4/'\nmake\nsudo make install\n\n\n\n\nThis will install the program in \n/usr/local/gromacs/5.0.4\n, and editing your \n.bashrc\n\nfile you will be able to choose the version of Gromacs that is running.\n\n\nAdding MPI support on a Mac is trickier. This appears mainly to be because the gcc \ncompilers from MacPorts  do not appear to support OpenMPI. Here is a workaround \n\n\nsudo port install openmpi\n\n\n\n\nNow we need a compiler that supports OpenMPI\n\n\nsudo port install openmpi-devel-gcc49\n\n\n\n\nFinally, we can follow the steps above but now we need a more complex cmake instruction\n\n\ncmake .. -DGMX_BUILD_OWN_FFTW=ON\n    -DGMX_BUILD_MDRUN_ONLY=on\n    -DCMAKE_INSTALL_PREFIX=/usr/local/gromacs/5.0.4\n    -DGMX_MPI=ON -DCMAKE_C_COMPILER=mpicc-openmpi-devel-gcc49\n    -DCMAKE_CXX_COMPILER=mpicxx-openmpi-devel-gcc49\n    -DGMX_SIMD=SSE4.1\nmake\nsudo make install-mdrun\n\n\n\n\nThis is only going to build an MPI version of \nmdrun\n, as the other Gromacs programs do not\nrun in parallel. We have to tell cmake what all the new fancy compilers are called and, \nunfortunately, these don\u2019t support AVX SIMD instructions so we have to fall back to SSE4.1. \nExperience suggests this doesn\u2019t impact performance as much as you might think.\n\n\nFor a previous version of Gromacs (4.6.7) that also happens to be installed using cmake I have\nfound this method not to work well. Instead I did something apparently simpler which did work.\n\n\nCC=mpicc CXX=mpiCC cmake .. -DGMX_BUILD_OWN_FFTW=ON -DCMAKE_INSTALL_PREFIX=/usr/local/gromacs/4.6.7 -DGMX_MPI=ON\n\n\n\n\nAnd then one would continue with the \nmake\n and \nmake install-mdrun\n steps as before. This allowed \nfor running jobs using the \nmpirun\n command as\n\n\nmpirun -np 12 mdrun_mpi -v $OPTIONS\n\n\n\n\nGromacs installation in Linux Ubuntu Server\n\n\nFirst of all we need to have everything in place for the installation. That is easily done by \nusing Ubuntu's package manager. \n\n\nsudo apt-get install libibnetdisc-dev\nsudo apt-get install libgsl0ldbl\nsudo apt-get install openmpi-bin openmpi-common openssh-client openssh-server libopenmpi1.6 libopenmpi-dbg libopenmpi-dev\nsudo apt-get install cmake\n\n\n\n\nThen we dowload the relevant Gromacs version\n\n\nwget ftp://ftp.gromacs.org/pub/gromacs/gromacs-5.1.2.tar.gz\n\n\n\n\nWe decompress the file and create the build directory for running the installation\n\n\ntar -xvf gromacs-5.1.2.tar.gz\ncd gromacs-5.1.2/\nmkdir build-cmake\ncd build-cmake/\n\n\n\n\nFinally we use the appropiate flags for building the MPI version of the mdrun program and the non-MPI \nversion of everything else\n\n\nsudo cmake .. -DGMX_GPU=ON -DGMX_BUILD_MDRUN_ONLY=ON -DGMX_MPI=ON -DCMAKE_INSTALL_PREFIX=/opt/gromacs/5.1.2\nsudo make install\n\nsudo cmake .. -DGMX_GPU=ON -DGMX_MPI=OFF -DCMAKE_INSTALL_PREFIX=/opt/gromacs/5.1.2\nsudo make install",
            "title": "Installation"
        },
        {
            "location": "/Gromacs/installation/#gromacs-installation-in-mac-os-x",
            "text": "",
            "title": "Gromacs installation in Mac OS X"
        },
        {
            "location": "/Gromacs/installation/#building-gromacs-4-using-make",
            "text": "One of the prerequisites for the installation are the fftw libraries for\ndoing Fourier transforms. Setting these up correctly seems to be limiting, \nas in the  configure  step Gromacs struggled to find the Macports libraries.\nSo first of all, download  fftw-3.0.1.tar.gz  \non your computer. Then you can simply install as  ./configure --enable-float --enable-threads\nmake\nsudo make install  Then you can download the source code and proceed to install Gromacs in the usual \nway  ./configure --prefix=/usr/local/gromacs/4.0.5 --enable-threads --enable-float\nmake\nsudo make install  On occasion I have found this install to give Segmentation Faults or not work. \nIn order to make it work it needed a little tweaking, making explicit the compiler\nand including additional flags, all of which may make a difference  CFLAGS=\"-m64 -U_FORTIFY_SOURCE\"; ./configure --prefix=/usr/local/gromacs/4.0.5 --enable-threads --enable-floats --enable-apple-64bit\nmake\nsudo make install  I still need to work out how to make this run in parallel on a Mac.",
            "title": "Building Gromacs 4.* using MAKE"
        },
        {
            "location": "/Gromacs/installation/#building-gromacs-5-using-cmake",
            "text": "(These instructions were borrowed from  Phillip W Fowler\u00b4s  blog).  Prerequisites for the installation are the gcc compilers available at MacPorts.\nThis requires you to first install Xcode.  Then the most important thing is to download the source code from the Gromacs \nwebsite and unpack the software.  tar xvf gromacs-5.0.4.tar.gz\ncd gromacs-5.0.4\nmkdir build  Then we start with the interestign stuff. In the last few versions Gromacs\nhas made a transition towards using cmake instead of make. Cmake is readily \navailable for Mac OS X, so no problem with this. Then you must run the following\nin the command line:  cmake .. -DGMX_BUILD_OWN_FFTW=ON -DCMAKE_INSTALL_PREFIX='/usr/local/gromacs/5.0.4/'\nmake\nsudo make install  This will install the program in  /usr/local/gromacs/5.0.4 , and editing your  .bashrc \nfile you will be able to choose the version of Gromacs that is running.  Adding MPI support on a Mac is trickier. This appears mainly to be because the gcc \ncompilers from MacPorts  do not appear to support OpenMPI. Here is a workaround   sudo port install openmpi  Now we need a compiler that supports OpenMPI  sudo port install openmpi-devel-gcc49  Finally, we can follow the steps above but now we need a more complex cmake instruction  cmake .. -DGMX_BUILD_OWN_FFTW=ON\n    -DGMX_BUILD_MDRUN_ONLY=on\n    -DCMAKE_INSTALL_PREFIX=/usr/local/gromacs/5.0.4\n    -DGMX_MPI=ON -DCMAKE_C_COMPILER=mpicc-openmpi-devel-gcc49\n    -DCMAKE_CXX_COMPILER=mpicxx-openmpi-devel-gcc49\n    -DGMX_SIMD=SSE4.1\nmake\nsudo make install-mdrun  This is only going to build an MPI version of  mdrun , as the other Gromacs programs do not\nrun in parallel. We have to tell cmake what all the new fancy compilers are called and, \nunfortunately, these don\u2019t support AVX SIMD instructions so we have to fall back to SSE4.1. \nExperience suggests this doesn\u2019t impact performance as much as you might think.  For a previous version of Gromacs (4.6.7) that also happens to be installed using cmake I have\nfound this method not to work well. Instead I did something apparently simpler which did work.  CC=mpicc CXX=mpiCC cmake .. -DGMX_BUILD_OWN_FFTW=ON -DCMAKE_INSTALL_PREFIX=/usr/local/gromacs/4.6.7 -DGMX_MPI=ON  And then one would continue with the  make  and  make install-mdrun  steps as before. This allowed \nfor running jobs using the  mpirun  command as  mpirun -np 12 mdrun_mpi -v $OPTIONS",
            "title": "Building Gromacs 5.* using CMAKE"
        },
        {
            "location": "/Gromacs/installation/#gromacs-installation-in-linux-ubuntu-server",
            "text": "First of all we need to have everything in place for the installation. That is easily done by \nusing Ubuntu's package manager.   sudo apt-get install libibnetdisc-dev\nsudo apt-get install libgsl0ldbl\nsudo apt-get install openmpi-bin openmpi-common openssh-client openssh-server libopenmpi1.6 libopenmpi-dbg libopenmpi-dev\nsudo apt-get install cmake  Then we dowload the relevant Gromacs version  wget ftp://ftp.gromacs.org/pub/gromacs/gromacs-5.1.2.tar.gz  We decompress the file and create the build directory for running the installation  tar -xvf gromacs-5.1.2.tar.gz\ncd gromacs-5.1.2/\nmkdir build-cmake\ncd build-cmake/  Finally we use the appropiate flags for building the MPI version of the mdrun program and the non-MPI \nversion of everything else  sudo cmake .. -DGMX_GPU=ON -DGMX_BUILD_MDRUN_ONLY=ON -DGMX_MPI=ON -DCMAKE_INSTALL_PREFIX=/opt/gromacs/5.1.2\nsudo make install\n\nsudo cmake .. -DGMX_GPU=ON -DGMX_MPI=OFF -DCMAKE_INSTALL_PREFIX=/opt/gromacs/5.1.2\nsudo make install",
            "title": "Gromacs installation in Linux Ubuntu Server"
        },
        {
            "location": "/Gromacs/md_setup/",
            "text": "Running a simulation in Gromacs\n\n\nThese brief instructions are a general guide to how to run a simple MD simulation using \nGromacs. In this case we are simulating the alanine dipeptide using Gromacs 2018 but \nthings should not change too much for other recent versions of the software. You must \nhave a working version installed in your machine. First of all, you will have to \ndownload the compressed files in\n\nalaTB_files.tar.gz\n\nto your computer and extract them typing \n\n\ntar -xvf ala_TB_files.tar.gz\n\n\n\n\nin your terminal.",
            "title": "Md setup"
        },
        {
            "location": "/Gromacs/md_setup/#running-a-simulation-in-gromacs",
            "text": "These brief instructions are a general guide to how to run a simple MD simulation using \nGromacs. In this case we are simulating the alanine dipeptide using Gromacs 2018 but \nthings should not change too much for other recent versions of the software. You must \nhave a working version installed in your machine. First of all, you will have to \ndownload the compressed files in alaTB_files.tar.gz \nto your computer and extract them typing   tar -xvf ala_TB_files.tar.gz  in your terminal.",
            "title": "Running a simulation in Gromacs"
        },
        {
            "location": "/Other/other/",
            "text": "Advice on writing scientific papers\n\n\n\n\n\n\nThe Art of Writing Science, by Kevin W. Plaxco (\nProtein Sci., 2010\n).\n\n\n\n\n\n\nWhitesides' Group: Writing a Paper, by G. M. Whitesides (\nAdv. Materials, 2004\n).",
            "title": "Other"
        },
        {
            "location": "/Other/other/#advice-on-writing-scientific-papers",
            "text": "The Art of Writing Science, by Kevin W. Plaxco ( Protein Sci., 2010 ).    Whitesides' Group: Writing a Paper, by G. M. Whitesides ( Adv. Materials, 2004 ).",
            "title": "Advice on writing scientific papers"
        },
        {
            "location": "/MacOSX/hacks/",
            "text": "Mac OS X hacks\n\n\nThese are just a few tricks that made my life incredibly easier when transitioning\nfrom a Ubuntu Linux machine to working on a Mac desktop computer.\n\n\nMounting ext2/ext3 volumes\n\n\nThis was useful for getting my backups to be read-write-able in my Mac. This is \ntaken from the notes that Uditha Atukorala wrote for the \n\nWireFrame\n\n\n1. Install MacFUSE\n\n\nIf you haven not already installed it download and install \n\nMacFUSE\n.\n\n\n2. Install FUSE - Ext2\n\n\nOnce you have MacFUSE download and install \n\nfuse-ext2\n. Even though it \nsays fuse-ext2, this one package gives both ext2 and ext3 read-write \nsupport.\n\n\nAfter installation you should see both MacFUSE and fuse-ext2 icons \nin System Preferences. You now have support for ext2 and ext3 file \nsystems. When you plug in an external ext2/ext3 partition it should \nautomatically show up in Finder, mounted and ready to use.\n\n\nIf auto-mount is not giving you read/write access to ext2/ext3 \npartitions then you will have to edit the auto-mount script for \nfuse-ext2 which can be found at \n/System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util\n.\n\n\n$ sudo vi -c /System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util\n\n\n\n\nAround line 207 (in function \nMount ()\n) you will find the line \n\nOPTIONS=\"auto_xattr,defer_permissions\"\n. Change that line to read as \n\nOPTIONS=\"auto_xattr,defer_permissions,rw+\"\n.\n\n\n...\nfunction Mount ()\n{\n    LogDebug \"[Mount] Entering function Mount...\"\n    # Setting both defer_auth and defer_permissions. The option was renamed\n    # starting with MacFUSE 1.0.0, and there seems to be no backward\n    # compatibility on the options.\n    # OPTIONS=\"auto_xattr,defer_permissions\"\n    OPTIONS=\"auto_xattr,defer_permissions,rw+\"\n\n    # The local option is only enabled on Leopard. It causes strange\n...\n}\n\n\n\n\nThis last bit was what actually solved my problem.",
            "title": "Hacks"
        },
        {
            "location": "/MacOSX/hacks/#mac-os-x-hacks",
            "text": "These are just a few tricks that made my life incredibly easier when transitioning\nfrom a Ubuntu Linux machine to working on a Mac desktop computer.",
            "title": "Mac OS X hacks"
        },
        {
            "location": "/MacOSX/hacks/#mounting-ext2ext3-volumes",
            "text": "This was useful for getting my backups to be read-write-able in my Mac. This is \ntaken from the notes that Uditha Atukorala wrote for the  WireFrame  1. Install MacFUSE  If you haven not already installed it download and install  MacFUSE .  2. Install FUSE - Ext2  Once you have MacFUSE download and install  fuse-ext2 . Even though it \nsays fuse-ext2, this one package gives both ext2 and ext3 read-write \nsupport.  After installation you should see both MacFUSE and fuse-ext2 icons \nin System Preferences. You now have support for ext2 and ext3 file \nsystems. When you plug in an external ext2/ext3 partition it should \nautomatically show up in Finder, mounted and ready to use.  If auto-mount is not giving you read/write access to ext2/ext3 \npartitions then you will have to edit the auto-mount script for \nfuse-ext2 which can be found at  /System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util .  $ sudo vi -c /System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util  Around line 207 (in function  Mount () ) you will find the line  OPTIONS=\"auto_xattr,defer_permissions\" . Change that line to read as  OPTIONS=\"auto_xattr,defer_permissions,rw+\" .  ...\nfunction Mount ()\n{\n    LogDebug \"[Mount] Entering function Mount...\"\n    # Setting both defer_auth and defer_permissions. The option was renamed\n    # starting with MacFUSE 1.0.0, and there seems to be no backward\n    # compatibility on the options.\n    # OPTIONS=\"auto_xattr,defer_permissions\"\n    OPTIONS=\"auto_xattr,defer_permissions,rw+\"\n\n    # The local option is only enabled on Leopard. It causes strange\n...\n}  This last bit was what actually solved my problem.",
            "title": "Mounting ext2/ext3 volumes"
        },
        {
            "location": "/PBS/documentation/",
            "text": "Installing Torque\n\n\nBellow follow instructions on how to install \nTorque\n\nin a multiprocessor Ubuntu Linux server. In this case the same machine is used as server, \nscheduler, submission node and compute node. These notes have been borrowed from \n\nthis blog post\n \n(thanks!) and are kept here for future records only. The version of Ubuntu used in this \ncase was 14.04 LTS. \n\n\nThe first thing to note is that you should do all of these as \nroot\n. Then we must ensure \nthat the first line in the \n/etc/hosts\n file reads as follows\n\n\n127.0.0.1   localhost\n\n\n\n\nNext comes the installation of some packages, which we do using Ubuntu`s package manager.\n\n\napt-get install torque-server torque-client torque-mom torque-pam\n\n\n\n\nAfter this step we simply stop these services since, apparently, the initial torque\n configuration does not really work as one would hope. In order to achieve this we simply\ntype the following in the terminal\n\n\n/etc/init.d/torque-mom stop\n/etc/init.d/torque-scheduler stop\n/etc/init.d/torque-server stop\n\n\n\n\nWe then can create a new setup for torque using the following\n\n\npbs_server -t create\n\n\n\n\nWhen prompted about whether we want to overwrite the existing database we will reply yes \n(\n[y]\n). Next the just-started server instance is killed using the following command for\nfurther configuration\n\n\nkillall pbs_server\n\n\n\n\nNext we will set up the server process. In my case the server is simply called \nlocalhost\n\nand I experienced some problems when trying to use a different server domain. \n\n\necho localhost > /etc/torque/server_name\necho localhost > /var/spool/torque/server_priv/acl_svr/acl_hosts\necho root@localhost > /var/spool/torque/server_priv/acl_svr/operators\necho root@localhost > /var/spool/torque/server_priv/acl_svr/managers\n\n\n\n\nThe following step is to simply add the compute nodes. Since here we are using the \n\"head node\" as \"compute node\" then we just need to type the following\n\n\necho \"localhost np=56\" > /var/spool/torque/server_priv/nodes\n\n\n\n\nThen we start the MOM process that handles the compute node\n\n\necho localhost > /var/spool/torque/mom_priv/config\n\n\n\n\nAfter all of these one has to restart the processes again\n\n\n/etc/init.d/torque-server start\n/etc/init.d/torque-scheduler start\n/etc/init.d/torque-mom start\n\n\n\n\nFinally we need to restart the scheduler, create the default queue and\nconfigure thee server to allow submissions from itself\n\n\nqmgr -c \"set server scheduling = true\"\nqmgr -c \"set server keep_completed = 300\"\nqmgr -c \"set server mom_job_sync = true\"\n# create default queue\nqmgr -c \"create queue batch\"\nqmgr -c \"set queue batch queue_type = execution\"\nqmgr -c \"set queue batch started = true\"\nqmgr -c \"set queue batch enabled = true\"\nqmgr -c \"set queue batch resources_default.walltime = 1:00:00\"\nqmgr -c \"set queue batch resources_default.nodes = 1\"\nqmgr -c \"set server default_queue = batch\"\n# configure submission pool\nqmgr -c \"set server submit_hosts = localhost\"\nqmgr -c \"set server allow_node_submit = true\"\n\n\n\n\nFinally you can test whether everything is working right for you using the following command\n\n\nqsub -I\n\n\n\n\nAn additional test script that can be done is to run this simples PBS script \ntest.sh\n\n\n#!/bin/bash\ncd $PBS_O_WORKDIR\n#direct the output to cluster_nodes\ncat $PBS_NODEFILE > ./cluster_nodes\n\n\n\n\nThis should run by simply writing the following command on your terminal \n\n\nqsub test.sh\n\n\n\n\nExample PBS script\n\n\nThis is just an example PBS script for submitting jobs in the \n\nArcher\n\nsupercomputing facility.\n\n\n#!/bin/bash --login\n#PBS -N jobname\n\n# Select 1  node\n#PBS -l select=1\n\n#PBS -l walltime=24:00:00\n#PBS -m abe\n#PBS -M name@emailprovider.org\n\n# Replace this with your budget code\n#PBS -A budget\n\n# Move to directory that script was submitted from\n#export PBS_O_WORKDIR=$(readlink -f $PBS_O_WORKDIR)\n#echo $PBS_O_WORKDIR\n#exit\n#cd $PBS_O_WORKDIR\ncd \"/work/directory/\"\n\n# Load the GROMACS module\nmodule add gromacs\n\n# Run GROMACS using default input and output file names\npull=1\nk=100\n\noptions=\"-s ${file} -deffnm ${file}\"\n\naprun -n 24 mdrun_mpi $options",
            "title": "Documentation"
        },
        {
            "location": "/PBS/documentation/#installing-torque",
            "text": "Bellow follow instructions on how to install  Torque \nin a multiprocessor Ubuntu Linux server. In this case the same machine is used as server, \nscheduler, submission node and compute node. These notes have been borrowed from  this blog post  \n(thanks!) and are kept here for future records only. The version of Ubuntu used in this \ncase was 14.04 LTS.   The first thing to note is that you should do all of these as  root . Then we must ensure \nthat the first line in the  /etc/hosts  file reads as follows  127.0.0.1   localhost  Next comes the installation of some packages, which we do using Ubuntu`s package manager.  apt-get install torque-server torque-client torque-mom torque-pam  After this step we simply stop these services since, apparently, the initial torque\n configuration does not really work as one would hope. In order to achieve this we simply\ntype the following in the terminal  /etc/init.d/torque-mom stop\n/etc/init.d/torque-scheduler stop\n/etc/init.d/torque-server stop  We then can create a new setup for torque using the following  pbs_server -t create  When prompted about whether we want to overwrite the existing database we will reply yes \n( [y] ). Next the just-started server instance is killed using the following command for\nfurther configuration  killall pbs_server  Next we will set up the server process. In my case the server is simply called  localhost \nand I experienced some problems when trying to use a different server domain.   echo localhost > /etc/torque/server_name\necho localhost > /var/spool/torque/server_priv/acl_svr/acl_hosts\necho root@localhost > /var/spool/torque/server_priv/acl_svr/operators\necho root@localhost > /var/spool/torque/server_priv/acl_svr/managers  The following step is to simply add the compute nodes. Since here we are using the \n\"head node\" as \"compute node\" then we just need to type the following  echo \"localhost np=56\" > /var/spool/torque/server_priv/nodes  Then we start the MOM process that handles the compute node  echo localhost > /var/spool/torque/mom_priv/config  After all of these one has to restart the processes again  /etc/init.d/torque-server start\n/etc/init.d/torque-scheduler start\n/etc/init.d/torque-mom start  Finally we need to restart the scheduler, create the default queue and\nconfigure thee server to allow submissions from itself  qmgr -c \"set server scheduling = true\"\nqmgr -c \"set server keep_completed = 300\"\nqmgr -c \"set server mom_job_sync = true\"\n# create default queue\nqmgr -c \"create queue batch\"\nqmgr -c \"set queue batch queue_type = execution\"\nqmgr -c \"set queue batch started = true\"\nqmgr -c \"set queue batch enabled = true\"\nqmgr -c \"set queue batch resources_default.walltime = 1:00:00\"\nqmgr -c \"set queue batch resources_default.nodes = 1\"\nqmgr -c \"set server default_queue = batch\"\n# configure submission pool\nqmgr -c \"set server submit_hosts = localhost\"\nqmgr -c \"set server allow_node_submit = true\"  Finally you can test whether everything is working right for you using the following command  qsub -I  An additional test script that can be done is to run this simples PBS script  test.sh  #!/bin/bash\ncd $PBS_O_WORKDIR\n#direct the output to cluster_nodes\ncat $PBS_NODEFILE > ./cluster_nodes  This should run by simply writing the following command on your terminal   qsub test.sh",
            "title": "Installing Torque"
        },
        {
            "location": "/PBS/documentation/#example-pbs-script",
            "text": "This is just an example PBS script for submitting jobs in the  Archer \nsupercomputing facility.  #!/bin/bash --login\n#PBS -N jobname\n\n# Select 1  node\n#PBS -l select=1\n\n#PBS -l walltime=24:00:00\n#PBS -m abe\n#PBS -M name@emailprovider.org\n\n# Replace this with your budget code\n#PBS -A budget\n\n# Move to directory that script was submitted from\n#export PBS_O_WORKDIR=$(readlink -f $PBS_O_WORKDIR)\n#echo $PBS_O_WORKDIR\n#exit\n#cd $PBS_O_WORKDIR\ncd \"/work/directory/\"\n\n# Load the GROMACS module\nmodule add gromacs\n\n# Run GROMACS using default input and output file names\npull=1\nk=100\n\noptions=\"-s ${file} -deffnm ${file}\"\n\naprun -n 24 mdrun_mpi $options",
            "title": "Example PBS script"
        },
        {
            "location": "/VMD/tools/",
            "text": "VMD scripting\n\n\nIt is relatively easy to use the command line instead of the GUI in VMD. This is\nparticularly useful when one needs to load multiple molecules, or make multiple\nvisualizations look the same (e.g. making multiple molecules look like NewCartoon\nbut changing their colour).\n\n\nLoading a molecule\n\n\nmol new file.pdb\n\n\n\n\nApplying a visualization style\n\n\nmol modstyle 0 0 NewCartoon\n\n\n\n\nChanging colour\n\n\nmol modcolor 0 0 ColorID 2\n\n\n\n\nLoading a trajectory\n\n\nmol addfile traj_comp.xtc\n\n\n\n\nLoops in VMD\n\n\nThe example below is for changing the colour of five different molecules so that\neach has a different colour.\n\n\nfor {set x 0} {$x <= 5} {incr x} {\nmol modcolor 0 $x ColorID $x \n}\n\n\n\n\nMaking videos in VMD\n\n\nVMD has a built in tool called Movie Maker. You must use it to generate a \nvideo according to your particular taste. You can find some instructions\n\nhere\n. \nOne possibility is that you save the files for each of the snapshots of the\nsimulation, instead of letting VMD produce the movie and remove the files\nfor you. If you do not do that, then you can tweak things a bit, in terms\nof using different movie formats or tuning the bitrate. Below is an example\nof the command that you can invoke for generating the video.\n\n\nffmpeg -i filename.%05d.ppm -r 25 -an -b 10000k -bt 10000k moviename.mpg\n\n\n\n\nClearly, you will need the \nffmpeg\n program for doing this, which in a Mac\nyou can obtain from MacPorts. Then the \n%0.5d\n in the filename just corresponds\nto the different files written by VMD that you want to process (be careful with \nformat).",
            "title": "Tools"
        },
        {
            "location": "/VMD/tools/#vmd-scripting",
            "text": "It is relatively easy to use the command line instead of the GUI in VMD. This is\nparticularly useful when one needs to load multiple molecules, or make multiple\nvisualizations look the same (e.g. making multiple molecules look like NewCartoon\nbut changing their colour).  Loading a molecule  mol new file.pdb  Applying a visualization style  mol modstyle 0 0 NewCartoon  Changing colour  mol modcolor 0 0 ColorID 2  Loading a trajectory  mol addfile traj_comp.xtc  Loops in VMD  The example below is for changing the colour of five different molecules so that\neach has a different colour.  for {set x 0} {$x <= 5} {incr x} {\nmol modcolor 0 $x ColorID $x \n}",
            "title": "VMD scripting"
        },
        {
            "location": "/VMD/tools/#making-videos-in-vmd",
            "text": "VMD has a built in tool called Movie Maker. You must use it to generate a \nvideo according to your particular taste. You can find some instructions here . \nOne possibility is that you save the files for each of the snapshots of the\nsimulation, instead of letting VMD produce the movie and remove the files\nfor you. If you do not do that, then you can tweak things a bit, in terms\nof using different movie formats or tuning the bitrate. Below is an example\nof the command that you can invoke for generating the video.  ffmpeg -i filename.%05d.ppm -r 25 -an -b 10000k -bt 10000k moviename.mpg  Clearly, you will need the  ffmpeg  program for doing this, which in a Mac\nyou can obtain from MacPorts. Then the  %0.5d  in the filename just corresponds\nto the different files written by VMD that you want to process (be careful with \nformat).",
            "title": "Making videos in VMD"
        },
        {
            "location": "/Beast/installation/",
            "text": "Beast and Beagle installation in a Linux server\n\n\nThese instructions are valid for a Linux server running Ubuntu 14.04 LTS, with\n2 Intel Xeon processors and 2 Nvidia GPUs. They are are based on\nthose found in the \nBeast\n and \n\nBeagle\n \nsites, plus my own experience.\n\n\nThe first thing I had to do was to get all the dependencies right, for which I run\nthe following\n\n\nsudo apt-get install build-essential autoconf automake libtool subversion pkg-config openjdk-6-jdk\n\n\n\n\nOnce these were all in place, I tried using the NVIDIA OpenCL implementation \nwhich was accessible via the apt-get command. However, I was unable to install\nthe Beagle library so that it was recognized. Tests systematically failed. \nHence, I resorted to the Intel implementation of \n\nOpenCL\n.  After the download, this can be easily installed \n\n\ncd opencl_runtime_16.1.1_x64_ubuntu_6.4.0.25/\nsudo bash install.sh\n\n\n\n\nThen I went back to the installation of the Beagle library.\n\n\n./autogen.sh\n./configure --prefix=\"/opt/beast/beagle-lib\" --with-opencl=\"/opt/intel/opencl/lib64\"\nsudo make install\n\n\n\n\nIn order to check whether I was getting the correct functionality I run the \ntest suite \n\n\nmake check\n\n\n\n\nFinally all went well. So that allowed running the downloaded Beast executable available \n\nhere\n.",
            "title": "Installation"
        },
        {
            "location": "/Beast/installation/#beast-and-beagle-installation-in-a-linux-server",
            "text": "These instructions are valid for a Linux server running Ubuntu 14.04 LTS, with\n2 Intel Xeon processors and 2 Nvidia GPUs. They are are based on\nthose found in the  Beast  and  Beagle  \nsites, plus my own experience.  The first thing I had to do was to get all the dependencies right, for which I run\nthe following  sudo apt-get install build-essential autoconf automake libtool subversion pkg-config openjdk-6-jdk  Once these were all in place, I tried using the NVIDIA OpenCL implementation \nwhich was accessible via the apt-get command. However, I was unable to install\nthe Beagle library so that it was recognized. Tests systematically failed. \nHence, I resorted to the Intel implementation of  OpenCL .  After the download, this can be easily installed   cd opencl_runtime_16.1.1_x64_ubuntu_6.4.0.25/\nsudo bash install.sh  Then I went back to the installation of the Beagle library.  ./autogen.sh\n./configure --prefix=\"/opt/beast/beagle-lib\" --with-opencl=\"/opt/intel/opencl/lib64\"\nsudo make install  In order to check whether I was getting the correct functionality I run the \ntest suite   make check  Finally all went well. So that allowed running the downloaded Beast executable available  here .",
            "title": "Beast and Beagle installation in a Linux server"
        }
    ]
}